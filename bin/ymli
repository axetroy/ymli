#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const process = require('process');

const _ = require('lodash');
const Yml = require('yml');
const program = require('commander');
const q = require('q');
const co = require('co');
const colors = require('colors');
const util = require('../utils/console');
const {debug, error, warn, log, info} = util;

/**
 * 解析yml
 * @param path
 * @returns {Promise<any>}
 */
function ymlParser(path) {
  return co(function*() {
    let content = Yml.load(path);
    return yield q.resolve(content);
  }).catch(function (err) {
    console.error(err);
    return q.reject(err);
  });
}

/**
 * 获取配置
 * @param content
 * @returns {*}
 */
function configParser(content) {
  return _.chain(content)
    .pickBy((value, key)=>/^\$/.test(key))
    .mapKeys((value, key)=> key.replace(/^\$/, ''))
    .value();
}

/**
 * 解析语言包
 * @param content
 * @returns {{}}
 */
function langParser(content) {
  let config = configParser(content);
  // 原始语言包
  let lang = _.chain(content)
    .pickBy((value, key)=>!/^\$/.test(key))
    .value();

  // 纯粹语言包
  let langPack = {};

  _.each(lang, function (value, key) {

    // key中不能存在空格
    if (/\s/.test(key)) {
      error('Entry[ ' + key.red + " ] can't contain spaces");
      return process.exit(1);
    }

    lang[key] = _.pick(value, config.supports);

    if (_.isEmpty(lang[key])) return delete lang[key];

    // TODO：做一个fallback, 给未补全的语言，自动补上默认语言，如果默认语言也没有，则使用key
    // 补全
    _.each(config.supports, function (local) {
      // 如果少定义了一条语言的翻译，则使用默认语言
      // 默认语言不存在则使用key
      if (!value[local]) lang[key][local] = value[config.default] || key;
    });

  });

  // 获取纯粹的语言包
  _.each(lang, function (value, key) {
    _.each(value, function (content, local) {
      if (!langPack[local]) langPack[local] = {};
      langPack[local][key] = content
    });
  });

  return langPack;
}

/**
 * 判断目录是否已存在
 * @param path
 * @returns {boolean}
 */
function hasDirExist(path) {
  let hasDirExist = false;
  try {
    fs.lstatSync(path);
    hasDirExist = true;
  } catch (err) {
    hasDirExist = false;
  }
  return hasDirExist
}

/**
 * 生成一个json文件
 * @param options
 * @returns {*}
 */
function generateJSON(options) {
  let {local, content, output, gzip} = options;
  let deferred = q.defer();
  let filePath = path.join(process.env.PWD, output, `${local}.local.json`);
  content = JSON.stringify(content, null, gzip ? null : 2);
  fs.writeFile(filePath, content, function (err) {
    if (err) return deferred.reject(err);
    let info = `generate: `.green + `${filePath}`.underline + '\n';
    process.stdout.write(info);
    deferred.resolve(content);
  });
  return deferred.promise;
}

/**
 * 生成多个json文件
 * @param program
 */
function generate(program) {
  let {file, output, gzip} = program;

  if (!file) throw new Error('file is required');
  if (!output) throw new Error('output dir is required');

  co(function*() {
    let content = yield ymlParser(file);

    // 配置文件
    let config = configParser(content);

    // 纯粹语言包
    let langPack = langParser(content);

    if (!hasDirExist(output)) fs.mkdirSync(output);

    _.each(config.supports, function (local) {
      generateJSON({
        local,
        output,
        content: langPack[local],
        gzip
      });
    });

  }).catch(function (err) {
    process.stderr.write(err);
    process.exit(1);
  });

}

function generateAllInOne(program) {
  let {file, output, gzip} = program;
  return co(function *() {
    let content = yield ymlParser(file);
    // 纯粹语言包
    let langPack = langParser(content);
    generateJSON({
      local: 'all',
      output,
      content: langPack,
      gzip
    })
  }).catch(function (err) {
    process.stderr.write(err);
    process.exit(1);
    return q.reject(err);
  });
}

program
  .version('1.0.0')
  .usage('<command> <options>')
  .option('-f, --file [file]', 'compile yml file')
  .option('-o, --output [path]', 'set an output path', './')
  .option('-g, --gzip', 'gzip the json file', false)
  .option('-a, --all-in-one', 'generate all lang in one json file', false)
  .option('-w, --watch', 'watch yml file change and re-generate', false);

program
  .command('generate')
  .description('compile the yml file and generate i18n file')
  .action(function () {
    let func = program.allInOne ? generateAllInOne : generate;

    func(program);

    if (program.watch) {
      fs.watchFile(program.file, function (curr, prev) {
        process.stdout.write(`file change: `.green + `rebuilding...\n`);
        func(program);
      });
    }
  });

program.parse(process.argv);

exports.hasDirExist = hasDirExist;
exports.ymlParser = ymlParser;
exports.configParser = configParser;
exports.langParser = langParser;
exports.generateJSON = generateJSON;